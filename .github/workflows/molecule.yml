---
name: Molecule
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  define_scenarios:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: "${{ github.repository }}"
      - name: Get changed playbooks
        id: changed-playbooks-yaml
        uses: tj-actions/changed-files@v39
        with:
          path: "${{ github.repository }}"
          quotepath: false
          files_yaml: |
            playbooks:
              - 'playbooks/*.yml'
      - name: Get changed roles
        id: changed-roles-yaml
        uses: tj-actions/changed-files@v39
        with:
          path: "${{ github.repository }}"
          dir_names: true
          dir_names_max_depth: 3
          dir_names_include_files: true
          quotepath: false
          files_yaml: |
            roles:
              - 'playbooks/roles/**/**'
      - name: Get changed scenarios
        id: changed-scenarios-yaml
        uses: tj-actions/changed-files@v39
        with:
          path: "${{ github.repository }}"
          dir_names: true
          dir_names_max_depth: 2
          dir_names_include_files: true
          quotepath: false
          files_yaml: |
            scenarios:
              - 'molecule/*/*.yml'
      - id: set-scenario-matrix
        run: |
          ROLES=(${{ steps.changed-roles-yaml.outputs.roles_all_changed_files }})
          echo "DEBUG ROLES: $ROLES"
          ROLES=("${ROLES[@]/#playbooks\/roles\//role-}") # playbooks/roles/foo -> role-foo

          PLAYBOOKS=(${{ steps.changed-playbooks-yaml.outputs.playbooks_all_changed_files }})
          echo "DEBUG PLAYBOOKS: $PLAYBOOKS"
          PLAYBOOKS=("${PLAYBOOKS[@]/#playbooks\//playbook-}") # playbooks/foo.yml -> playbook-foo.yml
          PLAYBOOKS=("${PLAYBOOKS[@]/%.yml/}") # playbook-foo.yml -> playbook-foo

          SCENARIOS=(${{ steps.changed-scenarios-yaml.outputs.scenarios_all_changed_files }})
          echo "DEBUG SCENARIOS: $SCENARIOS"
          SCENARIOS=("${SCENARIOS[@]/#molecule\//}") # molecule/playbook-foo -> playbook-foo

          # FAdd together all changed scenarios into a single array
          ALL_CHANGES="$PLAYBOOKS $ROLES $SCENARIOS"
          echo $ALL_CHANGES
          # Now construct a unique array out of ALL_CHANGES
          MATRIX=($(echo "$ALL_CHANGES" | xargs -n 1 | sort -u))
          # Next create a valid json array out of the bash array using jq
          MATRIX=$(printf '%s\n' "${MATRIX[@]}" | jq -R . | jq -c -s .)
          # Store the results
          echo matrix={\"scenarios\": $MATRIX} >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-scenario-matrix.outputs.matrix }}

  molecule:
    needs: define_scenarios
    runs-on: ubuntu-latest
    if: ${{ needs.define_scenarios.outputs.matrix != '[]' && needs.define_scenarios.outputs.matrix != '' }}
    env:
      DOCKER_USER: ${{ github.actor }}
      DOCKER_PW: ${{ secrets.GITHUB_TOKEN }}
      DOCKER_REGISTRY: ghcr.io
      ANSIBLE_FORCE_COLOR: '1'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define_scenarios.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - name: Check if scenario exists
        id: check_scenario_exists
        run: |
          if [[ -d molecule/${{ matrix.scenarios }}  ]]; then
            echo "exitcode=true" >> $GITHUB_OUTPUT
          else
            echo "exitcode=false" >> $GITHUB_OUTPUT
          fi
      - name: Molecule tests for playbook
        if: ${{ steps.check_scenario_exists.outputs.exitcode == 'true' }}
        run: |
          molecule -c molecule/default/molecule.yml test --scenario-name  ${{ matrix.scenarios }}

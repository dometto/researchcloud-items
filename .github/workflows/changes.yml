---
name: Changes
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  define_scenarios:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get changed roles and scenarios
        id: changed-dirs
        uses: tj-actions/changed-files@v40
        with:
          dir_names: true
          dir_names_max_depth: 3
          dir_names_include_files: true
          quotepath: false
          files_yaml: |
            roles:
              - 'playbooks/roles/**/**'
            scenarios:
              - 'molecule/*/*.yml'
      - name: Get changed scenarios
        uses: tj-actions/changed-files@v40
        with:
          id: scen_debug
          dir_names: true
          dir_names_max_depth: 2
          dir_names_include_files: true
          quotepath: false
          files_yaml: |
            scenarios:
              - 'molecule/*/*.yml'
      - name: Debug
        run: |
          echo "DEBUG SCENARIOS: ${{ steps.scen_debug.outputs.scenarios_all_changed_files }}  ${{ steps.scen_debug.outputs.all_changed_files }}"
      - name: Get changed playbooks
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          quotepath: false
          files: |
              playbooks/*.yml
      - name: Set matrix based on changed files
        id: set-scenario-matrix
        run: |
          ROLES=(${{ steps.changed-dirs.outputs.roles_all_changed_files }})
          echo "DEBUG ROLES: $ROLES"
          ROLES=("${ROLES[@]/#playbooks\/roles\//role-}") # playbooks/roles/foo -> role-foo

          PLAYBOOKS=(${{ steps.changed-files.outputs.all_changed_files }})
          echo "DEBUG PLAYBOOKS: $PLAYBOOKS"
          PLAYBOOKS=("${PLAYBOOKS[@]/#playbooks\//playbook-}") # playbooks/foo.yml -> playbook-foo.yml
          PLAYBOOKS=("${PLAYBOOKS[@]/%.yml/}") # playbook-foo.yml -> playbook-foo

          SCENARIOS=(${{ steps.changed-dirs.outputs.scenarios_all_changed_files }})
          echo "DEBUG SCENARIOS: $SCENARIOS"
          SCENARIOS=("${SCENARIOS[@]/#molecule\//}") # molecule/playbook-foo -> playbook-foo

          ALL_CHANGES="$PLAYBOOKS $ROLES $SCENARIOS"
          echo "DEBUG ALL_CHANGES: $ALL_CHANGES"
          # Now construct a unique array out of ALL_CHANGES
          MATRIX=($(echo "$ALL_CHANGES" | xargs -n 1 | sort -u))
          # Next create a valid json array out of the bash array using jq
          MATRIX=$(printf '%s\n' "${MATRIX[@]}" | jq -R . | jq -c -s .)
          # Store the results
          echo matrix={\"scenarios\": $MATRIX} >> $GITHUB_OUTPUT
          echo "DEBUG MATRIX: $MATRIX"